import { ElementRef, Renderer, OnInit, AfterContentInit, AfterViewInit, QueryList, EventEmitter } from '@angular/core';
import { Http } from '@angular/http';
import { GridOptions } from './grid-options';
import { GridColumnComponent } from './grid-column.component';
import { GridEvent } from './grid-event';
import 'rxjs/Rx';
export declare class GridComponent implements OnInit, AfterContentInit, AfterViewInit {
    private http;
    private renderer;
    static ROW_ALT_CLASS: string;
    static ROW_HOVER_CLASS: string;
    static ROW_SELECT_CLASS: string;
    options: GridOptions;
    columnList: QueryList<GridColumnComponent>;
    filterChange: EventEmitter<GridEvent>;
    sortChange: EventEmitter<GridEvent>;
    pageChange: EventEmitter<GridEvent>;
    pageSizeChange: EventEmitter<GridEvent>;
    itemSelect: EventEmitter<GridEvent>;
    requestSend: EventEmitter<GridEvent>;
    serverError: EventEmitter<GridEvent>;
    update: EventEmitter<GridEvent>;
    headerRef: ElementRef;
    bodyRef: ElementRef;
    private columns;
    private data;
    private errors;
    private filters;
    private dataProvider;
    private pages;
    private selectionMap;
    private selectedItems;
    private headerOffsetTop;
    private headerOffsetHeight;
    private bodyOffsetTop;
    private bodyOffsetHeight;
    private headerTopLimit;
    private headerTop;
    private bodyScrollLeft;
    private bodyClientX;
    private fullTableWidth;
    constructor(http: Http, renderer: Renderer);
    ngOnInit(): void;
    ngAfterContentInit(): void;
    ngAfterViewInit(): void;
    setData(data: Array<any>): void;
    getData(): Array<any>;
    getTotalCount(): number;
    setTotalCount(totalCount: number): void;
    setResults(results: Array<any>): void;
    getResults(): Array<any>;
    getCount(): number;
    getPageIndex(): number;
    setPageIndex(pageIndex: number): void;
    getPageSize(): any;
    setPageSize(pageSize: any): void;
    getTotalPages(): number;
    setFilter(columnName: string, value: string, columnType?: string): boolean;
    getFilter(columnName: string): any;
    clearFilter(columnName: string): void;
    clearAllFilters(): void;
    setError(columnName: string, error: string): void;
    getError(columnName: string): string;
    clearError(columnName: string): void;
    clearAllErrors(): void;
    setSort(columnName: string, sortType?: string): void;
    getSelectedItems(): Array<any>;
    clearSelection(): void;
    getColumn(columnName: string): any;
    render(): boolean;
    protected onWindowResize(event: UIEvent): void;
    protected onWindowScroll(event: UIEvent): void;
    protected onWindowMouseUp(event: MouseEvent): void;
    protected onGridMouseDown(event: MouseEvent): void;
    protected onGridMouseMove(event: MouseEvent): void;
    protected onGridDragStart(event: MouseEvent): void;
    protected handleContentResize(): void;
    protected refresh(): void;
    protected filter(): void;
    protected isInputFilterEnabled(column: GridColumnComponent): boolean;
    protected isSelectFilterEnabled(column: GridColumnComponent): boolean;
    protected getRowCssClass(index: number, row: any): string;
    protected getHeadingCssClass(): string;
    protected getBodyCssClass(): string;
    protected onBodyScroll(bodyElement: HTMLElement, headerElement: HTMLElement): void;
    protected onSelectAllCheckboxClick(selected: boolean): void;
    protected onSelectItemCheckboxClick(event: MouseEvent, row: any): void;
    protected allResultsSelected(): boolean;
    protected onRowClick(row: any): void;
    protected initDataProvider(): void;
    protected paginate(): void;
    protected onPageButtonClick(event: MouseEvent): void;
    protected isPageSizeOptionsEnabled(): boolean;
    protected onPageSizeDropDownChange(event: any): void;
    protected onSelectFilterChange(event: any, column: GridColumnComponent): void;
    protected onInputFilterBlur(event: MouseEvent, column: GridColumnComponent): void;
    protected onInputFilterChange(event: MouseEvent, column: GridColumnComponent): void;
    protected onInputFilterEnter(event: MouseEvent, column: GridColumnComponent): void;
    protected onHeadingClick(column: GridColumnComponent): void;
    protected isSortedBy(column: GridColumnComponent, sortType?: string): boolean;
    protected getSortType(column: GridColumnComponent): string;
    protected isSortingAllowed(column: GridColumnComponent): boolean;
    protected getColumnName(key: string, row: any): string;
    protected isRowSelected(row: any): boolean;
    protected isResultsDisplayAllowed(): boolean;
    private startBodyDrag(event);
    private endBodyDrag();
    private bodyDrag(event);
    private concatCssClass(cssClass, addition);
    private setRowSelection(row, value?);
    private getNestedKey(object);
}
